<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网抑云音乐优化系列教程（一）</title>
      <link href="posts/7bb4f6e3.html"/>
      <url>posts/7bb4f6e3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本系列大概会出3-4期教程，本教程仅用于学习交流，请勿用于非法用途，本作者不提供成品，不承担相应的法律责任，如果同意请继续观看本教程。</p><h3 id="0x001-MT和NP管理器介绍"><a href="#0x001-MT和NP管理器介绍" class="headerlink" title="0x001 MT和NP管理器介绍"></a>0x001 MT和NP管理器介绍</h3><p>MT管理器是一款问世十年的管理器而NP是近几年才横空出世，无疑的是MT管理器拥有更长的历史优化相对来说较好，但是MT一些功能是收费的，对于一些基本的功能用MT是足够的。NP相对优化不是那么完善，功能不是很稳定，但是完全免费且具有一些MT所不具备的功能，建议两者相互结合使用。</p><p>两款管理器均可在百度进行下载，此处不提供下载链接。</p><h3 id="0x002-优化教程（一）"><a href="#0x002-优化教程（一）" class="headerlink" title="0x002 优化教程（一）"></a>0x002 优化教程（一）</h3><h4 id="1-去除升级检测（注：本教程使用网易云版本为7-2-10）"><a href="#1-去除升级检测（注：本教程使用网易云版本为7-2-10）" class="headerlink" title="1. 去除升级检测（注：本教程使用网易云版本为7.2.10）"></a>1. 去除升级检测（注：本教程使用网易云版本为7.2.10）</h4><ul><li>首先管理器和安装包是必备的，没有的可以去豌豆荚下载旧版本，这里我提供一个7.0以下，较全的网易云历史版本的网盘。</li><li><a href="https://www.lanzoui.com/b00naic2b">网易云历史版本蓝奏云集合</a></li></ul><p>教程开始</p><ul><li>首先去除安装包的签名效验，工具在文末我会进行打包。</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/11/fdf1f23f1aaac917.jpg"></p><ul><li><p>MT选择过签后的包点击查看,然后点击DEX全选选择DEX++，字符串搜索</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">android/upgrade/get<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>然后全部替换为其他字符串即可。</p></li><li><p>然后搜索字符串versioncode,把完全匹配打开减少搜索个数。将appupdate中的versioncode替换掉。这样升级检测就已经去除。<br><img src="https://s3.bmp.ovh/imgs/2021/11/564effbbfaa418c7.jpg"><br><img src="https://s3.bmp.ovh/imgs/2021/11/3624c32e834baa5c.jpg"></p></li></ul><h4 id="2-去除听歌识曲检测"><a href="#2-去除听歌识曲检测" class="headerlink" title="2.去除听歌识曲检测"></a>2.去除听歌识曲检测</h4><ul><li>查看软件版本号我用的7.2.10就搜索字符串7.2.10，然后找到类名为modula的类将版本号清空即可。<br><img src="https://s3.bmp.ovh/imgs/2021/11/69ecde8967619363.jpg"><br><img src="https://s3.bmp.ovh/imgs/2021/11/7066aa2bbebdae8a.jpg"></li></ul><h3 id="0X003-最后步骤"><a href="#0X003-最后步骤" class="headerlink" title="0X003 最后步骤"></a>0X003 最后步骤</h3><ul><li>保存签名即可，本期教程结束。</li><li><a href="https://qimoxue.lanzoui.com/iDt9Twvb04d">过签工具</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+GitHub 图床搭建</title>
      <link href="posts/7a46f93c.html"/>
      <url>posts/7a46f93c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用GitHub搭建图床，在很久之前我就有了解，但由于市面上有挺多免费的图床，比如我之前一直在用的 路过图床，所以一直懒得动手搭建GitHub图床。一直到前两天我在完善博客的相册时，发现 路过图床 免费版的有这么多限制，比如：每小时限制上传50张图片，每天限制上传100张图片，而且免费版用户的存储容量貌似不过300M，这才意识到有一个自己的GitHub图床是多么重要。</p><h3 id="0x001-PicGO-介绍"><a href="#0x001-PicGO-介绍" class="headerlink" title="0x001 PicGO 介绍"></a>0x001 PicGO 介绍</h3><p>PicGo是一款图片上传工具，目前支持 SM.MS图床、腾讯云COS、GitHub图床、七牛图床、Imgur图床、阿里云OSS、又拍云图床，未来将支持更多图床。</p><p>在支持的这些图床中，SM.MS和Imgur有免费版和收费版，免费版的肯定有很多的使用限制，比如每小时限制上传次数，限制用户的上传容量等等；腾讯云COS、阿里云、有拍云都是要收费使用的；七牛云貌似前期使用免费，后期又要收费才能使用，就剩下的GitHub才是免费且最可靠的。</p><p>PicGo源项目GitHub地址已给出，但是去GitHub下载速度非常慢，这里额外提供一个蓝奏云的快速下载地址。</p><ul><li>GitHub地址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></li><li>蓝奏云地址：<a href="https://luckyzmj.lanzous.com/id3e0id">https://luckyzmj.lanzous.com/id3e0id</a></li></ul><h3 id="0x002-GitHub-图床"><a href="#0x002-GitHub-图床" class="headerlink" title="0x002 GitHub 图床"></a>0x002 GitHub 图床</h3><h4 id="1-创建GitHub图床仓库"><a href="#1-创建GitHub图床仓库" class="headerlink" title="1. 创建GitHub图床仓库"></a>1. 创建GitHub图床仓库</h4><p>首先需要有一个登录GitHub的账号，没有的话去<a href="https://github.com/">GitHub官网</a>注册一个</p><p>创建一个新的图床仓库，点击右上角的New repository</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529155833.png"></p><p>填写如下配置信息，然后Create创建仓库</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160010.png"></p><h4 id="2-获取GitHub-token值"><a href="#2-获取GitHub-token值" class="headerlink" title="2. 获取GitHub token值"></a>2. 获取GitHub token值</h4><p>点击右上的头像，选择设置Setting</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160727.png"></p><p>点击选择Developer settings </p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160939.png"></p><p>点击 Generate New token</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529161241.png"></p><p>填写如下配置信息，只要勾选repo选项即可，然后页面拉到底部点击Generate token 即可</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529161716.png"></p><p>此时会跳转到带有token的页面，将token值复制记录下来，之后用PicGo绑定GitHub图床时会利用到</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529162127.png"></p><h3 id="0x003-PicGo-配置"><a href="#0x003-PicGo-配置" class="headerlink" title="0x003 PicGo 配置"></a>0x003 PicGo 配置</h3><h4 id="1-绑定GitHub图床"><a href="#1-绑定GitHub图床" class="headerlink" title="1. 绑定GitHub图床"></a>1. 绑定GitHub图床</h4><p>首先下载安装好PicGo软件，然后在右列表找到GitHub图床配置</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529163130.png"></p><p><strong>1. 设定仓库名(必填)：</strong> </p><p>按照“GitHub账户名/仓库名的格式填写”，比如我的是：Luckyzmj/imgbed</p><p><strong>2. 设定分支名(必填)：</strong> </p><p>仓库分支名填写”master”或者”main”，视情况而定。因为GitHub 官方表示,从2020年10月1日起,在该平台上创建的所有新的源代码仓库将默认被命名为”main”,而不是原先的”master”。</p><p><strong>3. 设定Token(必填)：</strong> </p><p>将之前步骤的Token值复制粘贴到这里</p><p><strong>4. 指定存储路径：</strong> </p><p>这个选项可以为空，如果想将图片上传到仓库的指定目录下，可以填写目录名加/，比如我的imgbed仓库下有个posts文件夹，需设置为 posts/</p><p><strong>5. 设定自定义域名：</strong> </p><p>这里统一用jsdelivr的CDN加速域名，在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接</p><pre class="line-numbers language-none"><code class="language-none">自定义域名格式：https://cdn.jsdelivr.net/gh/GitHub账户名/仓库名以我的格式为例：https://cdn.jsdelivr.net/gh/Luckyzmj/imgbed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置完全部信息后，点击 设为默认图床，最后点击确定即可</p><h4 id="2-上传图片到图床"><a href="#2-上传图片到图床" class="headerlink" title="2. 上传图片到图床"></a>2. 上传图片到图床</h4><p>在上传区上传图片，可支持本地图片上传(可多选图片)、剪贴板上传、URL上传等三种方式。上传图片成功后，选择你想要生成的图片链接格式</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529170555.png"></p><p>在图片区，可以看到成功上传的图片，选择相应的图片进行操作即可</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529170831.png"></p><h4 id="3-PicGo-注意事项"><a href="#3-PicGo-注意事项" class="headerlink" title="3. PicGo 注意事项"></a>3. PicGo 注意事项</h4><p>如果配置完PicGo后却上传图片失败，可以参考以下方法：</p><ol><li>检查自定义域名是否正确</li><li>仓库名不要有空格</li><li>图片名字不要带有特殊符号，如：%、+、*、空格等</li><li>建议开启时间戳重命名，防止图片名字重复</li><li>上传图片间歇太短，需在PicGo设置中关闭Server选项</li><li>PicGo应用不稳定因素，需重启应用</li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/sunhwee/article/details/100109956">https://blog.csdn.net/sunhwee/article/details/100109956</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> GitHub图床 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
